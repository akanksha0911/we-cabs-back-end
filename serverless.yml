# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: wecabs
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: '2'


provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2
  environment:
    USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    BOOKING_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    BID_TABLE: ${self:service}-${opt:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"
functions:

 # user api functions

  userPut:
    handler: api/user.put
    memorySize: 128
    description: put user details
    events:
      - http:
          path: user
          method: post
  userGet:
    handler: api/user.get
    events:
      - http:
          path: user/{email}
          method: get
  userList:
    handler: api/user.list
    memorySize: 128
    description: list all users details
    events:
      - http:
          path: user
          method: get

  # booking api functions

  bookingPut:
    handler: api/booking.put
    memorySize: 128
    description: put booking details
    events:
      - http:
          path: booking
          method: post
  bookingGet:
    handler: api/booking.get
    events:
      - http:
          path: booking/{bookingId}
          method: get
  bookingList:
    handler: api/booking.list
    memorySize: 128
    description: list all bookings details
    events:
      - http:
          path: booking
          method: get

  # bid api functions

  bidPut:
    handler: api/bid.put
    memorySize: 128
    description: put bid details
    events:
      - http:
          path: bid
          method: post
  bidGet:
    handler: api/bid.get
    events:
      - http:
          path: bid/{bidId}
          method: get
  bidList:
    handler: api/bid.list
    memorySize: 128
    description: list all bids details
    events:
      - http:
          path: bid
          method: get

resources:
  Resources:
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "email"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.USER_TABLE}

    BookingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "bookingId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "bookingId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.BOOKING_TABLE}

    BidDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "bidId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "bidId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.BID_TABLE}
